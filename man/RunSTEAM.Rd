% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/RunSTEAM.R
\name{RunSTEAM}
\alias{RunSTEAM}
\title{Run STEAM: Training and Evaluation}
\usage{
RunSTEAM(
  STEAM.obj,
  mode = c("simple", "nested"),
  train.ratio = 0.8,
  n.size = 5,
  seed = 123,
  cv.folds = 10,
  cv.repeats = 3,
  trainval.ratio = 0.8,
  n_outer_folds = 5,
  n_inner_folds = 3,
  model = "rf",
  n.tree = 500,
  kernel = "linear",
  train.folder.name = "train.out",
  allowParallel = FALSE,
  metric = "Kappa",
  tune.grid = NULL,
  outer_folds = NULL,
  inner_folds = NULL,
  verbose = TRUE,
  cv.cores = 1,
  parallel_mode = NULL,
  maxnweights = 10000
)
}
\arguments{
\item{STEAM.obj}{A STEAM object created by \code{\link{LoadSTEAM}}.}

\item{mode}{Either "simple" (train/test split) or "nested" (nested CV).}

\item{train.ratio}{Proportion of data for training (simple mode only).}

\item{n.size}{Neighborhood size for neighborhood averaging (spatial smoothing).}

\item{seed}{Random seed (default 123).}

\item{cv.folds}{Number of folds for CV (simple mode).}

\item{cv.repeats}{Number of repeats for repeated CV (simple mode).}

\item{n_outer_folds}{Outer folds for nested CV.}

\item{n_inner_folds}{Inner folds for nested CV.}

\item{model}{Model type: "rf", "svm", "xgb", or "multinom".}

\item{kernel}{Kernel type for SVM ("linear" or "radial").}

\item{allowParallel}{Allow caret-level parallelism (default FALSE).}

\item{metric}{Metric to optimize during training (default "Kappa").}

\item{tune.grid}{Optional custom tuning grid.}

\item{outer_folds}{Optional precomputed outer folds (nested mode).}

\item{inner_folds}{Optional precomputed inner folds (nested mode).}

\item{verbose}{Logical, print messages (default TRUE).}

\item{cv.cores}{Number of cores for nestedcv parallelism.}

\item{parallel_mode}{Optional parallel backend ("multisession", etc.).}

\item{maxnweights}{Maximum weights (for multinom models).}
}
\value{
A STEAM object with trained models, predictions, and evaluation metrics.
}
\description{
Main entry point to train and evaluate STEAM models. Supports both
simple train/test splitting and leakage-safe nested cross-validation.
}
